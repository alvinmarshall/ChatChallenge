@page "/mychatroom"
@attribute [Authorize(Roles = "User")]	

@inject NavigationManager NavigationManager
@inject IChatRoomService ChatRoomService
@inject IUserService UserService
@using Microsoft.AspNetCore.SignalR.Client
@using global::App.Services
@using Domain.Model
@implements IAsyncDisposable


<PageTitle>Available Rooms</PageTitle>


<div class="card">
    <div class="card-header container-fluid">
        <div class="row">
            <div class="col-md-11">Rooms</div>
            <div class="col-md-1 float-end">
                <buttton class="btn btn-outline-primary" @onclick="NavigateToCreateRoom">Create</buttton>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
                <th>Users</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var chatRoom in _chatRoomsList)
            {
                <tr>
                    <td>
                        <a href="/mychatroom/room/@chatRoom.Id">@chatRoom.Name</a>
                    </td>
                    <td>@chatRoom.Users.Count</td>
                    @if (_currentUser.TryGetValue(chatRoom.Id, out _))
                    {
                        <td>
                            <button class="btn btn-outline-danger">Leave</button>
                        </td>
                    }
                    else
                    {
                        <td>
                            <button @onclick="() => Join(chatRoom)" class="btn btn-outline-primary">Join</button>
                        </td>
                    }

                </tr>
            }
            </tbody>
        </table>
    </div>
</div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private List<ChatRoom> _chatRoomsList = new();
    private ChatUser? _chatUser;
    private HubConnection? _hubConnection;
    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    private readonly Dictionary<Guid, bool> _currentUser = new();


    protected override async Task OnInitializedAsync()
    {
        _chatRoomsList = await ChatRoomService.Rooms();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        await _hubConnection.StartAsync();

        if (AuthenticationState is not  null)
        {
            var state = await AuthenticationState;
            var identityName = state.User.Identity?.Name;
            ChatUser? chatUser;
            _chatRoomsList.ForEach(room =>
            {
                var roomUsers = room.Users;
                chatUser = roomUsers.FirstOrDefault(user => user.Id == Guid.Parse(identityName!));
                if (chatUser is not null)
                {
                    _currentUser[room.Id] = true;
                }
            });
            _chatUser = await UserService.GetUser(Guid.Parse(identityName!));
        }
    }

    private void NavigateToCreateRoom()
    {
        NavigationManager.NavigateTo("/mychatroom/create");
    }

    private async void Join(ChatRoom chatRoom)
    {
        if (_chatUser is null) return;
        var users = chatRoom.Users;
        users.Add(new ChatUser() { Id = _chatUser.Id });
        chatRoom.Users = new List<ChatUser>() { _chatUser };
        await ChatRoomService.JoinRoom(chatRoom);
        var message = $"{_chatUser.Name} Joined";
        if (IsConnected)
        {
            if (_hubConnection is not null)
            {
                await _hubConnection.SendAsync(
                    "SendMessage",
                    chatRoom.Id,
                    _chatUser.Id,
                    message);
            }
        }
        NavigationManager.NavigateTo($"/mychatroom/room/{chatRoom.Id}");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}